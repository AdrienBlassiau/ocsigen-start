(* This file was generated by Eliom-base-app.
   Feel free to use it, modify it, and redistribute it as you wish. *)


{shared{
open Eliom_content.Html5
open Eliom_content.Html5.F
}}

let wrong_password =
  Eliom_reference.Volatile.eref ~scope:Eliom_common.request_scope false

let user_already_exists =
  Eliom_reference.Volatile.eref ~scope:Eliom_common.request_scope false

let user_does_not_exist =
  Eliom_reference.Volatile.eref ~scope:Eliom_common.request_scope false

let user_already_preregistered =
  Eliom_reference.Volatile.eref ~scope:Eliom_common.request_scope false

let activation_key_outdated =
  Eliom_reference.Volatile.eref ~scope:Eliom_common.request_scope false


module Make(A : sig
              val avatar_directory : string list
            end) = struct

  let uploader = Ow_pic_uploader.make
      ~directory:A.avatar_directory
      ~name:"uppic"
      ~crop_ratio:(Some 1.)
      ~max_width:500
      ~service_wrapper:(fun f -> Eba_session.connected_rpc (fun userid -> f))
      ~crop_wrapper:(fun f -> Eba_session.connected_rpc
                        (fun userid p ->
                           lwt fname = f p in
                           Eba_user.update_avatar fname userid))
      ()


  let upload_pic_link () =
    let link = D.Raw.a [pcdata "Upload picture"] in
    ignore {unit{
      Lwt_js_events.async (fun () ->
        Lwt_js_events.clicks (To_dom.of_element %link)
          (fun _ _ ->
             try_lwt
               match_lwt Ow_pic_uploader.upload_pic_popup
                         %uploader
                           ~url_path:["avatars"]
                           ~text:"Upload new picture"
                           ()
               with
               | None -> Lwt.return ()
                      | _ ->
                        (* For now I don't update in place, but reload *)
                        Eliom_client.change_page
                          ~service:Eliom_service.void_coservice' () ()
             with e ->
               Eba_msg.msg ~level:`Err "Error while uploading the picture";
               Eliom_lib.debug_exn "%s" e "â†’ ";
               Lwt.return ()

          ))
    }};
    link


  let reset_tips_link () =
    let l = D.Raw.a [pcdata "See help again from beginning"] in
    ignore {unit{
      Lwt_js_events.(async (fun () ->
        clicks (To_dom.of_element %l)
          (fun _ _ ->
             Eliom_client.exit_to
               ~service:%Eba_tips.reset_tips_service
               () ();
             Lwt.return ()
          )));
    }};
    l


  let user_menu_ user =
  [
    p [pcdata "Change your password:"];
    Eba_view.password_form ();
    hr ();
    upload_pic_link ();
    hr ();
    reset_tips_link ();
    hr ();
    Eba_view.disconnect_button ();
  ]

  let user_menu_fun =
    ref (user_menu_
         : 'a -> Html5_types.div_content Eliom_content.Html5.elt list)

  let user_menu user =
    let but = D.div ~a:[a_class ["eba_usermenu_button"]]
        [Ow_icons.F.config ~class_:["fa-large"] ()]
    in
    let menu = D.div (!user_menu_fun user) in
    ignore (Ow_button.button_alert but menu);
    div ~a:[a_class ["eba_usermenu"]] [but; menu]

  let set_user_menu f = user_menu_fun := f

  let connected_user_box user =
    lwt username = Eba_view.username user in
    Lwt.return (D.div ~a:[a_id "eba-user-box"] [
      Eba_view.avatar user;
      username;
      user_menu user;
    ])


  let connection_box () =
    let id = "eba_login_signup_box" in
    if Eliom_reference.Volatile.get Eba_msg.activation_key_created
    then
      Lwt.return
        (D.div ~a:[a_id id]
           [p [pcdata "An email has been sent to this address. ";
               pcdata "Click on the link it contains to log in."]])
    else
      let set = {Ow_active_set.t'{
        Ow_active_set.to_server_set
          (Ow_active_set.set ~at_least_one:true ())
      }} in
      let button1 = D.h2 [pcdata "Login"] in
      let form1 = Eba_view.connect_form () in
      let o1,_ =
        Ow_button.button_alert
          ~set
          ~pressed:true
          button1
          form1
      in
      let button2 = D.h2 [pcdata "Lost password"] in
      let form2 = Eba_view.forgot_password_form () in
      let o2,_ =
        Ow_button.button_alert
          ~set:set
          button2
          form2
      in
      let button3 = D.h2 [pcdata "Preregister"] in
      let form3 =
        Eba_view.preregister_form
          "Enter your e-mail address to get informed when the site opens \
           and be one of the first users"
      in
      let o3,_ =
        Ow_button.button_alert
          ~set
          button3
          form3
      in
      let button4 = D.h2 [pcdata "Register"] in
      let form4 = Eba_view.sign_up_form () in
      let o4,_ =
        Ow_button.button_alert
          ~set
          button4
          form4
      in
      (* function to press the corresponding button and display
       * the flash message error. *)
      let press but msg =
        ignore {unit{
          (Ow_button.to_button_alert %but)##press();
          Eba_msg.msg ~level:`Err %msg
        }};
        Lwt.return ()
      in
      let display_error o34 () =
        (* Function to display flash message error *)
        let wrong_password = Eliom_reference.Volatile.get wrong_password in
        let user_already_exists = Eliom_reference.Volatile.get user_already_exists
        in
        let user_does_not_exist = Eliom_reference.Volatile.get user_does_not_exist
        in
        let user_already_preregistered =
          Eliom_reference.Volatile.get user_already_preregistered
        in
        let activation_key_outdated =
          Eliom_reference.Volatile.get activation_key_outdated
        in

        if wrong_password
        then press o1 "Wrong password"
        else if activation_key_outdated
        then press o2 "Invalid activation key, ask for a new one."
        else if user_already_exists
        then press o34 "E-mail already exists"
        else if user_does_not_exist
        then press o2 "User does not exist"
        else if user_already_preregistered
        then press o3 "E-mail already preregistered"
        else Lwt.return ()
      in

      (* Here we will return the div correponding to the current
       * website state, and also a function to handle specific
       * flash messages *)
      let d, handle_rmsg =
        (* If the registration is not open (pre-registration only): *)
        (* (D.div ~a:[a_id id] *)
        (*    [button1; button3; button2; form1; form3; form2]), *)
        (* display_error o3 *)
        (* otherwise *)
        (D.div ~a:[a_id id]
           [button1; button2; button4; form1; form2; form4]),
        display_error o4
      in
      lwt () = handle_rmsg () in
      Lwt.return d

  let userbox user =
    match user with
    | Some user -> connected_user_box user
    | None -> connection_box ()

end
